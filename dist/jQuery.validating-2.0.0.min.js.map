{"version":3,"sources":["jQuery.validating-2.0.0.min.js"],"names":["$","isUndefined","value","isBoolean","Boolean","isPromise","promise","Object","then","Validating","insert","selector","validator","prepend","isFunction","registry","this","append","remove","index","entry","amount","length","fix","splice","validate","elements","notify","promises","each","element","elementPromises","issue","is","call","undefined","push","Deferred","reject","when","apply","trigger","noop","defineProperty","configurable","enumerable","get","set","jQuery"],"mappings":";;;;;;;;;CASC,SAAUA,GACP,YAOA,SAASC,GAAYC,GACjB,MAAwB,mBAAVA,GAQlB,QAASC,GAAUD,GACf,MAAwB,iBAAVA,IAAuBA,YAAiBE,SAQ1D,QAASC,GAAUC,GACf,MAAOA,aAAmBC,SAAkC,kBAAjBD,GAAQE,KAMvDR,EAAES,WAAa,QAASA,KAqBpB,QAASC,GAAOC,EAAUC,EAAWC,GAC7BF,GAAYX,EAAEc,WAAWF,IACzBG,EAASF,EAAU,UAAY,SAC3BF,SAAYA,EACZC,UAAYA,IAnBxB,GAAIG,KAKJ,OAAMC,gBAAgBP,IAwBtBO,KAAKH,QAAU,SAAUF,EAAUC,GAC/BF,EAAOC,EAAUC,GAAW,IAQhCI,KAAKC,OAAS,SAAUN,EAAUC,GAC9BF,EAAOC,EAAUC,GAAW,IAShCI,KAAKE,OAAS,SAAUP,EAAUC,GAC9B,GACIO,GAAOC,EADPC,EAAS,CAEb,IAAIV,IAAaV,EAAYW,IAAcZ,EAAEc,WAAWF,IAEpD,IADAO,EAAQJ,EAASO,OACVH,EAAQ,GACXA,IACAC,EAAQL,EAASI,GACbC,EAAMT,WAAaA,IAAaS,EAAMR,YAAcA,IAAcQ,EAAMG,KAAOtB,EAAYW,MAC3FG,EAASS,OAAOL,EAAO,GACvBE,IAIZ,OAAOA,IASXL,KAAKS,SAAW,SAAUC,EAAUC,GAChC,GAAIC,KAiCJ,OA5BAF,GAASG,KAAK,WACV,GAAIC,GAAU9B,EAAEgB,MACZe,IAEJ/B,GAAE6B,KAAKd,EAAU,WACb,GAAIiB,GAAQF,EAAQG,GAAGjB,KAAKL,UAAYK,KAAKJ,UAAUsB,KAAKJ,EAASA,GAAWK,MAChF,IAAI9B,EAAU2B,GACVD,EAAgBK,KAAKJ,OAClB,CAAA,GAAI7B,EAAU6B,GACjB,MAAOA,EACJ,KAAK/B,EAAY+B,GAEpB,MADAD,GAAgBK,KAAKpC,EAAEqC,WAAWC,OAAON,GAAO1B,YACzC,KAIfyB,EAAkB/B,EAAEuC,KAAKC,MAAMxC,EAAG+B,GAClCH,EAASQ,KAAKL,GACVJ,IACAG,EAAQW,QAAQ,wBAAyBV,GACzCA,EAAgBvB,KAAK,WACjBsB,EAAQW,QAAQ,qBACjB,SAAUT,GACTF,EAAQW,QAAQ,qBAAsBT,QAK3ChC,EAAEuC,KAAKC,MAAMxC,EAAG4B,GAAUpB,KAAKR,EAAE0C,WAO5CnC,QAAOoC,eAAe3B,KAAM,UACxB4B,cAAe,EACfC,YAAe,EACfC,IAAe,WACX,MAAO/B,GAASO,QAEpByB,IAAe,SAAUzB,GACrBP,EAASO,OAASA,MAjHf,GAAIb,KAuHrBuC","file":"jQuery.validating-2.0.0.min.js","sourcesContent":["/*!\n * jQuery.validating\n * jQuery plugin to validate elements\n *\n * @version v2.0.0\n * @link https://github.com/orianda/jQuery.validating\n * @author Orianda <orianda@paan.de>\n * @license MIT\n */\n(function ($) {\n    \"use strict\";\n\n    /**\n     * Is the value undefined?\n     * @param {*} value\n     * @returns {boolean}\n     */\n    function isUndefined(value) {\n        return typeof value === 'undefined';\n    }\n\n    /**\n     * Is the value an boolean?\n     * @param value\n     * @returns {boolean}\n     */\n    function isBoolean(value) {\n        return typeof value === 'boolean' || value instanceof Boolean;\n    }\n\n    /**\n     * Is this a promise object?\n     * @param {*} promise\n     * @returns {boolean}\n     */\n    function isPromise(promise) {\n        return promise instanceof Object && typeof promise.then === 'function';\n    }\n\n    /**\n     * Create validator controller\n     */\n    $.Validating = function Validating() {\n\n        /**\n         * Validator registry\n         * @type {Object[]}\n         */\n        var registry = [];\n\n        /**\n         * Make sure this is created by a new call\n         */\n        if (!(this instanceof Validating)) {\n            return new Validating();\n        }\n\n        /**\n         * Register validator\n         * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\n         * @param {Function} validator\n         * @param {boolean} prepend\n         */\n        function insert(selector, validator, prepend) {\n            if (selector && $.isFunction(validator)) {\n                registry[prepend ? 'unshift' : 'push']({\n                    selector  : selector,\n                    validator : validator\n                });\n            }\n        }\n\n        /**\n         * Prepend validator to validator stack\n         * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\n         * @param {Function} validator\n         */\n        this.prepend = function (selector, validator) {\n            insert(selector, validator, true);\n        };\n\n        /**\n         * Append validator to validator stack\n         * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\n         * @param {Function} validator\n         */\n        this.append = function (selector, validator) {\n            insert(selector, validator, false);\n        };\n\n        /**\n         * Remove validator from validator stack\n         * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\n         * @param {Function} [validator]\n         * @returns {number}\n         */\n        this.remove = function (selector, validator) {\n            var amount = 0,\n                index, entry;\n            if (selector && (isUndefined(validator) || $.isFunction(validator))) {\n                index = registry.length;\n                while (index > 0) {\n                    index--;\n                    entry = registry[index];\n                    if (entry.selector === selector && (entry.validator === validator || !entry.fix && isUndefined(validator))) {\n                        registry.splice(index, 1);\n                        amount++;\n                    }\n                }\n            }\n            return amount;\n        };\n\n        /**\n         * Trigger validation process\n         * @param {jQuery} elements\n         * @param {boolean} [notify=false]\n         * @returns {promise}\n         */\n        this.validate = function (elements, notify) {\n            var promises = [];\n\n            /**\n             * Validate each element\n             */\n            elements.each(function () {\n                var element = $(this),\n                    elementPromises = [];\n\n                $.each(registry, function () {\n                    var issue = element.is(this.selector) ? this.validator.call(element, element) : undefined;\n                    if (isPromise(issue)) {\n                        elementPromises.push(issue);\n                    } else if (isBoolean(issue)) {\n                        return issue;\n                    } else if (!isUndefined(issue)) {\n                        elementPromises.push($.Deferred().reject(issue).promise());\n                        return false;\n                    }\n                });\n\n                elementPromises = $.when.apply($, elementPromises);\n                promises.push(elementPromises);\n                if (notify) {\n                    element.trigger('validating.validating', elementPromises);\n                    elementPromises.then(function () {\n                        element.trigger('valid.validating');\n                    }, function (issue) {\n                        element.trigger('invalid.validating', issue);\n                    });\n                }\n            });\n\n            return $.when.apply($, promises).then($.noop);\n        };\n\n        /**\n         * Registry handler\n         * @type {Object}\n         */\n        Object.defineProperty(this, 'length', {\n            configurable : false,\n            enumerable   : false,\n            get          : function () {\n                return registry.length;\n            },\n            set          : function (length) {\n                registry.length = length;\n            }\n        });\n\n    };\n\n}(jQuery));"],"sourceRoot":"/source/"}