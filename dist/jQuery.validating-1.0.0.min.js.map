{"version":3,"sources":["jQuery.validating-1.0.0.min.js"],"names":["$","isUndefined","value","isPromise","promise","Object","then","insert","selector","validator","fix","prepend","isFunction","registry","append","remove","index","entry","amount","length","splice","getLength","setLength","validating","defineProperty","configurable","enumerable","get","set","fn","notify","trigger","promises","element","name","noop","this","each","elementPromises","issue","is","call","push","Deferred","reject","when","apply","jQuery"],"mappings":";;;;;;;;;CASC,SAAUA,GACV,YAaA,SAASC,GAAaC,GACrB,MAAwB,mBAAVA,GAQf,QAASC,GAAWC,GACnB,MAAOA,aAAmBC,SAAkC,kBAAjBD,GAAQE,KAUpD,QAASC,GAAQC,EAAUC,EAAWC,EAAKC,GACtCH,GAAYR,EAAEY,WAAYH,IAC7BI,EAASF,EAAU,UAAY,SAC9BH,SAAUA,EACVC,UAAWA,EACXC,MAAOA,IAWV,QAASC,GAASH,EAAUC,EAAWC,GACtCH,EAAQC,EAAUC,EAAWC,GAAK,GASnC,QAASI,GAAQN,EAAUC,EAAWC,GACrCH,EAAQC,EAAUC,EAAWC,GAAK,GASnC,QAASK,GAAQP,EAAUC,GAC1B,GACCO,GAAOC,EADJC,EAAS,CAEb,IAAIV,IAAaP,EAAaQ,IAAeT,EAAEY,WAAYH,IAE1D,IADAO,EAAQH,EAASM,OACVH,EAAQ,GACdA,IACAC,EAAQJ,EAASG,GACbC,EAAMT,WAAaA,IAAaS,EAAMR,YAAcA,IAAcQ,EAAMP,KAAOT,EAAaQ,MAC/FI,EAASO,OAAQJ,EAAO,GACxBE,IAIH,OAAOA,GAOR,QAASG,KACR,MAAOR,GAASM,OAQjB,QAASG,GAAWJ,GACnB,GAAIC,GAASN,EAASM,OACrBH,EAAQG,EAAS,CAClB,KAAKH,EAAOA,GAAS,GAAKG,EAASD,EAAQF,IACrCH,EAASG,GAAON,MACpBG,EAASO,OAAQJ,EAAO,GACxBG,KAnGH,GAAIN,KA4GJb,GAAEuB,WAAalB,OAAOmB,gBACrBb,QAASA,EACTG,OAAQA,EACRC,OAAQA,GACN,UACFU,cAAc,EACdC,YAAY,EACZC,IAAKN,EACLO,IAAKN,IAQNtB,EAAE6B,GAAGN,WAAa,SAAUO,GAC3B,GACCC,GADGC,IAuCJ,OA/BAD,GAAUD,EAAS,SAAUG,EAASC,EAAMhC,GAC3C+B,EAAQF,QAASG,EAAO,cAAehC,IACpCF,EAAEmC,KAKNC,KAAKC,KAAM,WACV,GAAIJ,GAAUjC,EAAGoC,MAChBE,IAEDtC,GAAEqC,KAAMxB,EAAU,WACjB,GAAI0B,GAAQN,EAAQO,GAAIJ,KAAK5B,WAAc4B,KAAK3B,UAAUgC,KAAMR,EAASA,EACzE,IAAI9B,EAAWoC,GACdD,EAAgBI,KAAMH,OAChB,IAAIA,EAEV,MADAD,GAAgBI,KAAM1C,EAAE2C,WAAWC,OAAQL,GAAQnC,YAC5C,IAITkC,EAAkBtC,EAAE6C,KAAKC,MAAO9C,EAAGsC,GACnCN,EAASU,KAAMJ,GACfP,EAASE,EAAS,aAAcK,GAChCA,EAAgBhC,KAAM,WACrByB,EAASE,EAAS,UAChB,SAAUM,GACZR,EAASE,EAAS,UAAWM,OAIxBvC,EAAE6C,KAAKC,MAAO9C,EAAGgC,GAAW1B,KAAMN,EAAEmC,QAG1CY","file":"jQuery.validating-1.0.0.min.js","sourcesContent":["/*!\r\n * jQuery.validating\r\n * jQuery plugin to validate elements\r\n *\r\n * @version v1.0.0\r\n * @link https://github.com/orianda/jQuery.validating\r\n * @author Orianda <orianda@paan.de>\r\n * @license MIT\r\n */\r\n(function( $ ) {\r\n\t\"use strict\";\r\n\r\n\t/**\r\n\t * Validator registry\r\n\t * @type {Object[]}\r\n\t */\r\n\tvar registry = [];\r\n\r\n\t/**\r\n\t * Is the value undefined?\r\n\t * @param {*} value\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction isUndefined( value ) {\r\n\t\treturn typeof value === 'undefined';\r\n\t}\r\n\r\n\t/**\r\n\t * Is this a promise object?\r\n\t * @param {*} promise\r\n\t * @returns {boolean}\r\n\t */\r\n\tfunction isPromise( promise ) {\r\n\t\treturn promise instanceof Object && typeof promise.then === 'function';\r\n\t}\r\n\r\n\t/**\r\n\t * Register validator\r\n\t * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\r\n\t * @param {Function} validator\r\n\t * @param {boolean} fix\r\n\t * @param {boolean} prepend\r\n\t */\r\n\tfunction insert( selector, validator, fix, prepend ) {\r\n\t\tif( selector && $.isFunction( validator ) ) {\r\n\t\t\tregistry[prepend ? 'unshift' : 'push']( {\r\n\t\t\t\tselector: selector,\r\n\t\t\t\tvalidator: validator,\r\n\t\t\t\tfix: !!fix\r\n\t\t\t} );\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Prepend validator to validator stack\r\n\t * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\r\n\t * @param {Function} validator\r\n\t * @param {boolean} [fix]\r\n\t */\r\n\tfunction prepend( selector, validator, fix ) {\r\n\t\tinsert( selector, validator, fix, true );\r\n\t}\r\n\r\n\t/**\r\n\t * Append validator to validator stack\r\n\t * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\r\n\t * @param {Function} validator\r\n\t * @param {boolean} [fix=false]\r\n\t */\r\n\tfunction append( selector, validator, fix ) {\r\n\t\tinsert( selector, validator, fix, false );\r\n\t}\r\n\r\n\t/**\r\n\t * Remove validator from validator stack\r\n\t * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\r\n\t * @param {Function} [validator]\r\n\t * @returns {number}\r\n\t */\r\n\tfunction remove( selector, validator ) {\r\n\t\tvar amount = 0,\r\n\t\t\tindex, entry;\r\n\t\tif( selector && (isUndefined( validator ) || $.isFunction( validator )) ) {\r\n\t\t\tindex = registry.length;\r\n\t\t\twhile( index > 0 ) {\r\n\t\t\t\tindex--;\r\n\t\t\t\tentry = registry[index];\r\n\t\t\t\tif( entry.selector === selector && (entry.validator === validator || !entry.fix && isUndefined( validator )) ) {\r\n\t\t\t\t\tregistry.splice( index, 1 );\r\n\t\t\t\t\tamount++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn amount;\r\n\t}\r\n\r\n\t/**\r\n\t * Get amount of registered validators\r\n\t * @returns {Number}\r\n\t */\r\n\tfunction getLength() {\r\n\t\treturn registry.length;\r\n\t}\r\n\r\n\t/**\r\n\t * Reduce the registered validators to the given amount\r\n\t * Behaves similar to native array (e.g [1,2,3,4,5,6,7,8,9,0].length = 5 -> [1,2,3,4,5])\r\n\t * @param {number} amount\r\n\t */\r\n\tfunction setLength( amount ) {\r\n\t\tvar length = registry.length,\r\n\t\t\tindex = length - 1;\r\n\t\tfor( index; index >= 0 && length > amount; index-- ) {\r\n\t\t\tif( !registry[index].fix ) {\r\n\t\t\t\tregistry.splice( index, 1 );\r\n\t\t\t\tlength--;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Registry handler\r\n\t * @type {Object}\r\n\t */\r\n\t$.validating = Object.defineProperty( {\r\n\t\tprepend: prepend,\r\n\t\tappend: append,\r\n\t\tremove: remove\r\n\t}, 'length', {\r\n\t\tconfigurable: false,\r\n\t\tenumerable: false,\r\n\t\tget: getLength,\r\n\t\tset: setLength\r\n\t} );\r\n\r\n\t/**\r\n\t * Trigger validation process\r\n\t * @param {boolean} [notify=false]\r\n\t * @returns {promise}\r\n\t */\r\n\t$.fn.validating = function( notify ) {\r\n\t\tvar promises = [],\r\n\t\t\ttrigger;\r\n\r\n\t\t/**\r\n\t\t * Trigger status event on element\r\n\t\t * if it is enabled.\r\n\t\t * @type {Function}\r\n\t\t */\r\n\t\ttrigger = notify ? function( element, name, value ) {\r\n\t\t\telement.trigger( name + '.validating', value );\r\n\t\t} : $.noop;\r\n\r\n\t\t/**\r\n\t\t * Validate each element\r\n\t\t */\r\n\t\tthis.each( function() {\r\n\t\t\tvar element = $( this ),\r\n\t\t\t\telementPromises = [];\r\n\r\n\t\t\t$.each( registry, function() {\r\n\t\t\t\tvar issue = element.is( this.selector ) && this.validator.call( element, element );\r\n\t\t\t\tif( isPromise( issue ) ) {\r\n\t\t\t\t\telementPromises.push( issue );\r\n\t\t\t\t} else if( issue ) {\r\n\t\t\t\t\telementPromises.push( $.Deferred().reject( issue ).promise() );\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t} );\r\n\r\n\t\t\telementPromises = $.when.apply( $, elementPromises );\r\n\t\t\tpromises.push( elementPromises );\r\n\t\t\ttrigger( element, 'validating', elementPromises );\r\n\t\t\telementPromises.then( function() {\r\n\t\t\t\ttrigger( element, 'valid' );\r\n\t\t\t}, function( issue ) {\r\n\t\t\t\ttrigger( element, 'invalid', issue );\r\n\t\t\t} );\r\n\t\t} );\r\n\r\n\t\treturn $.when.apply( $, promises ).then( $.noop );\r\n\t};\r\n\r\n}( jQuery ));"],"sourceRoot":"/source/"}