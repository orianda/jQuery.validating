{"version":3,"sources":["jQuery.validating.min.js"],"names":["$","isUndefined","value","isBoolean","Boolean","isPromise","promise","Object","then","wait","promises","fail","error","action","issue","finish","finished","l","defer","i","Deferred","length","always","Validating","insert","selector","validator","data","prepend","isFunction","registry","this","append","remove","index","entry","amount","fix","splice","validate","elements","notify","each","element","elementPromises","context","is","call","push","reject","when","apply","trigger","defineProperty","configurable","enumerable","get","set","jQuery"],"mappings":";;;;;;;;;CASC,SAAUA,GACP,YAOA,SAASC,GAAYC,GACjB,MAAwB,mBAAVA,GAQlB,QAASC,GAAUD,GACf,MAAwB,iBAAVA,IAAuBA,YAAiBE,SAQ1D,QAASC,GAAUC,GACf,MAAOA,aAAmBC,SAAkC,kBAAjBD,GAAQE,KAGvD,QAASC,GAAKC,GAUV,QAASC,GAAKC,GACVC,EAAS,SACTC,EAAQF,EAOZ,QAASG,KACLC,IACgBC,GAAZD,IAGAf,EAAYa,IAAUG,EAAI,EAC1BC,EAAML,KAENK,EAAML,GAAQC,IA1BtB,GAGIA,GAAOK,EAAGF,EAHVC,EAAQlB,EAAEoB,WACVJ,EAAW,EACXH,EAAS,SA4Bb,KAAKM,EAAI,EAAGF,EAAIP,EAASW,OAAYJ,EAAJE,EAAOA,IACpCT,EAASS,GAAGR,KAAKA,GAAMW,OAAOP,EAIlC,OADAA,KACOG,EAAMZ,UAMjBN,EAAEuB,WAAa,QAASA,KAsBpB,QAASC,GAAOC,EAAUC,EAAWC,EAAMC,GACnCH,GAAYzB,EAAE6B,WAAWH,IACzBI,EAASF,EAAU,UAAY,SAC3BH,SAAYA,EACZC,UAAYA,EACZC,KAAYA,IArBxB,GAAIG,KAKJ,OAAMC,gBAAgBR,IA2BtBQ,KAAKH,QAAU,SAAUH,EAAUC,EAAWC,GAC1CH,EAAOC,EAAUC,EAAWC,GAAM,IAStCI,KAAKC,OAAS,SAAUP,EAAUC,EAAWC,GACzCH,EAAOC,EAAUC,EAAWC,GAAM,IAStCI,KAAKE,OAAS,SAAUR,EAAUC,GAC9B,GACIQ,GAAOC,EADPC,EAAS,CAEb,IAAIX,IAAaxB,EAAYyB,IAAc1B,EAAE6B,WAAWH,IAEpD,IADAQ,EAAQJ,EAAST,OACVa,EAAQ,GACXA,IACAC,EAAQL,EAASI,GACbC,EAAMV,WAAaA,IAAaU,EAAMT,YAAcA,IAAcS,EAAME,KAAOpC,EAAYyB,MAC3FI,EAASQ,OAAOJ,EAAO,GACvBE,IAIZ,OAAOA,IASXL,KAAKQ,SAAW,SAAUC,EAAUC,GAChC,GAAI/B,KAqCJ,OAhCA8B,GAASE,KAAK,WACV,GAAIC,GAAU3C,EAAE+B,MACZa,KACAC,IAEJ7C,GAAE0C,KAAKZ,EAAU,WACb,GAAIhB,EAIJ,IAHI6B,EAAQG,GAAGf,KAAKN,YAChBX,EAAQiB,KAAKL,UAAUqB,KAAKF,EAASF,EAAQ,GAAIZ,KAAKJ,OAEtDtB,EAAUS,GACV8B,EAAgBI,KAAKlC,OAClB,CAAA,GAAIX,EAAUW,GACjB,MAAOA,EACJ,KAAKb,EAAYa,GAEpB,MADA8B,GAAgBI,KAAKhD,EAAEoB,WAAW6B,OAAOnC,GAAOR,YACzC,KAIfsC,EAAkB5C,EAAEkD,KAAKC,MAAMnD,EAAG4C,GAClClC,EAASsC,KAAKJ,GACVH,IACAE,EAAQS,QAAQ,wBAAyBR,GACzCA,EAAgBpC,KAAK,WACjBmC,EAAQS,QAAQ,qBACjB,SAAUtC,GACT6B,EAAQS,QAAQ,qBAAsBtC,QAK3CL,EAAKC,QAOhBH,QAAO8C,eAAetB,KAAM,UACxBuB,cAAe,EACfC,YAAe,EACfC,IAAe,WACX,MAAO1B,GAAST,QAEpBoC,IAAe,SAAUpC,GACrBS,EAAST,OAASA,MAzHf,GAAIE,KA+HrBmC","file":"jQuery.validating.min.js","sourcesContent":["/*!\n * jQuery.validating\n * jQuery plugin to validate elements\n *\n * @version v2.0.2\n * @link https://github.com/orianda/jQuery.validating\n * @author Orianda <orianda@paan.de>\n * @license MIT\n */\n(function ($) {\n    \"use strict\";\n\n    /**\n     * Is the value undefined?\n     * @param {*} value\n     * @returns {boolean}\n     */\n    function isUndefined(value) {\n        return typeof value === 'undefined';\n    }\n\n    /**\n     * Is the value an boolean?\n     * @param value\n     * @returns {boolean}\n     */\n    function isBoolean(value) {\n        return typeof value === 'boolean' || value instanceof Boolean;\n    }\n\n    /**\n     * Is this a promise object?\n     * @param {*} promise\n     * @returns {boolean}\n     */\n    function isPromise(promise) {\n        return promise instanceof Object && typeof promise.then === 'function';\n    }\n\n    function wait(promises) {\n        var defer = $.Deferred(),\n            finished = 0,\n            action = 'resolve',\n            issue, i, l;\n\n        /**\n         * Fail handler\n         * @param {*} error\n         */\n        function fail(error) {\n            action = 'reject';\n            issue = error;\n        }\n\n        /**\n         * Reduce counter and finish deferred\n         * if the last element promise resolved\n         */\n        function finish() {\n            finished++;\n            if (finished <= l) {\n                return;\n            }\n            if (isUndefined(issue) || l > 1) {\n                defer[action]();\n            } else {\n                defer[action](issue);\n            }\n        }\n\n        for (i = 0, l = promises.length; i < l; i++) {\n            promises[i].fail(fail).always(finish);\n        }\n\n        finish();\n        return defer.promise();\n    }\n\n    /**\n     * Create validator controller\n     */\n    $.Validating = function Validating() {\n\n        /**\n         * Validator registry\n         * @type {Object[]}\n         */\n        var registry = [];\n\n        /**\n         * Make sure this is created by a new call\n         */\n        if (!(this instanceof Validating)) {\n            return new Validating();\n        }\n\n        /**\n         * Register validator\n         * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\n         * @param {Function} validator\n         * @param {Object} data\n         * @param {boolean} prepend\n         */\n        function insert(selector, validator, data, prepend) {\n            if (selector && $.isFunction(validator)) {\n                registry[prepend ? 'unshift' : 'push']({\n                    selector  : selector,\n                    validator : validator,\n                    data      : data\n                });\n            }\n        }\n\n        /**\n         * Prepend validator to validator stack\n         * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\n         * @param {Function} validator\n         * @param {Object} [data]\n         */\n        this.prepend = function (selector, validator, data) {\n            insert(selector, validator, data, true);\n        };\n\n        /**\n         * Append validator to validator stack\n         * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\n         * @param {Function} validator\n         * @param {Object} [data]\n         */\n        this.append = function (selector, validator, data) {\n            insert(selector, validator, data, false);\n        };\n\n        /**\n         * Remove validator from validator stack\n         * @param {string|Function|jQuery|HTMLElement|HTMLElement[]} selector\n         * @param {Function} [validator]\n         * @returns {number}\n         */\n        this.remove = function (selector, validator) {\n            var amount = 0,\n                index, entry;\n            if (selector && (isUndefined(validator) || $.isFunction(validator))) {\n                index = registry.length;\n                while (index > 0) {\n                    index--;\n                    entry = registry[index];\n                    if (entry.selector === selector && (entry.validator === validator || !entry.fix && isUndefined(validator))) {\n                        registry.splice(index, 1);\n                        amount++;\n                    }\n                }\n            }\n            return amount;\n        };\n\n        /**\n         * Trigger validation process\n         * @param {jQuery} elements\n         * @param {boolean} [notify=false]\n         * @returns {promise}\n         */\n        this.validate = function (elements, notify) {\n            var promises = [];\n\n            /**\n             * Validate each element\n             */\n            elements.each(function () {\n                var element = $(this),\n                    elementPromises = [],\n                    context = {};\n\n                $.each(registry, function () {\n                    var issue;\n                    if (element.is(this.selector)) {\n                        issue = this.validator.call(context, element[0], this.data);\n                    }\n                    if (isPromise(issue)) {\n                        elementPromises.push(issue);\n                    } else if (isBoolean(issue)) {\n                        return issue;\n                    } else if (!isUndefined(issue)) {\n                        elementPromises.push($.Deferred().reject(issue).promise());\n                        return false;\n                    }\n                });\n\n                elementPromises = $.when.apply($, elementPromises);\n                promises.push(elementPromises);\n                if (notify) {\n                    element.trigger('validating.validating', elementPromises);\n                    elementPromises.then(function () {\n                        element.trigger('valid.validating');\n                    }, function (issue) {\n                        element.trigger('invalid.validating', issue);\n                    });\n                }\n            });\n\n            return wait(promises);\n        };\n\n        /**\n         * Registry handler\n         * @type {Object}\n         */\n        Object.defineProperty(this, 'length', {\n            configurable : false,\n            enumerable   : false,\n            get          : function () {\n                return registry.length;\n            },\n            set          : function (length) {\n                registry.length = length;\n            }\n        });\n\n    };\n\n}(jQuery));"],"sourceRoot":"/source/"}